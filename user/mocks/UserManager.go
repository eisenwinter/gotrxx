// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	generator "github.com/eisenwinter/gotrxx/generator"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserManager is an autogenerated mock type for the UserManager type
type UserManager struct {
	mock.Mock
}

// AddUserToRole provides a mock function with given fields: ctx, id, role
func (_m *UserManager) AddUserToRole(ctx context.Context, id uuid.UUID, role string) error {
	ret := _m.Called(ctx, id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: ctx, email, password, phone, confirmToken
func (_m *UserManager) InsertUser(ctx context.Context, email string, password string, phone *string, confirmToken *string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email, password, phone, confirmToken)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string, *string) uuid.UUID); ok {
		r0 = rf(ctx, email, password, phone, confirmToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *string, *string) error); ok {
		r1 = rf(ctx, email, password, phone, confirmToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUser provides a mock function with given fields: ctx, email, roles, appIds
func (_m *UserManager) InviteUser(ctx context.Context, email *string, roles []string, appIds []int) (generator.RandomTokenType, error) {
	ret := _m.Called(ctx, email, roles, appIds)

	var r0 generator.RandomTokenType
	if rf, ok := ret.Get(0).(func(context.Context, *string, []string, []int) generator.RandomTokenType); ok {
		r0 = rf(ctx, email, roles, appIds)
	} else {
		r0 = ret.Get(0).(generator.RandomTokenType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string, []string, []int) error); ok {
		r1 = rf(ctx, email, roles, appIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserManager creates a new instance of UserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserManager(t mockConstructorTestingTNewUserManager) *UserManager {
	mock := &UserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
