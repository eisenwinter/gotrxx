// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/eisenwinter/gotrxx/user"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SignIner is an autogenerated mock type for the SignIner type
type SignIner struct {
	mock.Mock
}

// SignIn provides a mock function with given fields: ctx, email, password
func (_m *SignIner) SignIn(ctx context.Context, email string, password string) (*user.SignedInUser, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *user.SignedInUser
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user.SignedInUser); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.SignedInUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignInByIDFromToken provides a mock function with given fields: ctx, userID, tokenType
func (_m *SignIner) SignInByIDFromToken(ctx context.Context, userID uuid.UUID, tokenType string) (*user.SignedInUser, error) {
	ret := _m.Called(ctx, userID, tokenType)

	var r0 *user.SignedInUser
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *user.SignedInUser); ok {
		r0 = rf(ctx, userID, tokenType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.SignedInUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFromSubject provides a mock function with given fields: ctx, userID
func (_m *SignIner) UserFromSubject(ctx context.Context, userID uuid.UUID) (*user.SignedInUser, error) {
	ret := _m.Called(ctx, userID)

	var r0 *user.SignedInUser
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *user.SignedInUser); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.SignedInUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSignIner interface {
	mock.TestingT
	Cleanup(func())
}

// NewSignIner creates a new instance of SignIner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSignIner(t mockConstructorTestingTNewSignIner) *SignIner {
	mock := &SignIner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
