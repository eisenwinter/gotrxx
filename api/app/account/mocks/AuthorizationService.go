// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authorization "github.com/eisenwinter/gotrxx/authorization"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthorizationService is an autogenerated mock type for the AuthorizationService type
type AuthorizationService struct {
	mock.Mock
}

// AuthorizationByCommonToken provides a mock function with given fields: ctx, tokenType, token
func (_m *AuthorizationService) AuthorizationByCommonToken(ctx context.Context, tokenType string, token string) (*authorization.Authorization, error) {
	ret := _m.Called(ctx, tokenType, token)

	var r0 *authorization.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *authorization.Authorization); ok {
		r0 = rf(ctx, tokenType, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tokenType, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImplicitAuthorization provides a mock function with given fields: ctx, userID, clientID, scopes
func (_m *AuthorizationService) ImplicitAuthorization(ctx context.Context, userID uuid.UUID, clientID string, scopes string) (*authorization.Authorization, error) {
	ret := _m.Called(ctx, userID, clientID, scopes)

	var r0 *authorization.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) *authorization.Authorization); ok {
		r0 = rf(ctx, userID, clientID, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, clientID, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserAuthorization provides a mock function with given fields: ctx, userID, clientID
func (_m *AuthorizationService) VerifyUserAuthorization(ctx context.Context, userID uuid.UUID, clientID string) (*authorization.Authorization, error) {
	ret := _m.Called(ctx, userID, clientID)

	var r0 *authorization.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *authorization.Authorization); ok {
		r0 = rf(ctx, userID, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthorizationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizationService creates a new instance of AuthorizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizationService(t mockConstructorTestingTNewAuthorizationService) *AuthorizationService {
	mock := &AuthorizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
