// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	mock "github.com/stretchr/testify/mock"

	time "time"

	user "github.com/eisenwinter/gotrxx/user"

	uuid "github.com/google/uuid"
)

// TokenIssuer is an autogenerated mock type for the TokenIssuer type
type TokenIssuer struct {
	mock.Mock
}

// IssueAccessTokenForUser provides a mock function with given fields: _a0, authorizationID, clientID, scopes
func (_m *TokenIssuer) IssueAccessTokenForUser(_a0 *user.SignedInUser, authorizationID uuid.UUID, clientID string, scopes []string) (jwt.Token, error) {
	ret := _m.Called(_a0, authorizationID, clientID, scopes)

	var r0 jwt.Token
	if rf, ok := ret.Get(0).(func(*user.SignedInUser, uuid.UUID, string, []string) jwt.Token); ok {
		r0 = rf(_a0, authorizationID, clientID, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.SignedInUser, uuid.UUID, string, []string) error); ok {
		r1 = rf(_a0, authorizationID, clientID, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueRememberMeToken provides a mock function with given fields: ctx, authorizationID
func (_m *TokenIssuer) IssueRememberMeToken(ctx context.Context, authorizationID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, authorizationID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, authorizationID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, authorizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RememberMeDuration provides a mock function with given fields:
func (_m *TokenIssuer) RememberMeDuration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Sign provides a mock function with given fields: token
func (_m *TokenIssuer) Sign(token jwt.Token) ([]byte, error) {
	ret := _m.Called(token)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(jwt.Token) []byte); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenIssuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenIssuer creates a new instance of TokenIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenIssuer(t mockConstructorTestingTNewTokenIssuer) *TokenIssuer {
	mock := &TokenIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
