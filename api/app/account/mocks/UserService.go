// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangeEmail provides a mock function with given fields: ctx, id, email
func (_m *UserService) ChangeEmail(ctx context.Context, id uuid.UUID, email string) error {
	ret := _m.Called(ctx, id, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: ctx, id, password
func (_m *UserService) ChangePassword(ctx context.Context, id uuid.UUID, password string) error {
	ret := _m.Called(ctx, id, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmUser provides a mock function with given fields: ctx, token
func (_m *UserService) ConfirmUser(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableMFA provides a mock function with given fields: ctx, userID
func (_m *UserService) DisableMFA(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailToID provides a mock function with given fields: ctx, email
func (_m *UserService) EmailToID(ctx context.Context, email string) (uuid.UUID, bool) {
	ret := _m.Called(ctx, email)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// EnableMFA provides a mock function with given fields: ctx, userID, secret
func (_m *UserService) EnableMFA(ctx context.Context, userID uuid.UUID, secret string) (string, error) {
	ret := _m.Called(ctx, userID, secret)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) string); ok {
		r0 = rf(ctx, userID, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InRole provides a mock function with given fields: ctx, id, role
func (_m *UserService) InRole(ctx context.Context, id uuid.UUID, role string) bool {
	ret := _m.Called(ctx, id, role)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, id, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InviteUser provides a mock function with given fields: ctx, email
func (_m *UserService) InviteUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsMFAEnabled provides a mock function with given fields: ctx, userID
func (_m *UserService) IsMFAEnabled(ctx context.Context, userID uuid.UUID) bool {
	ret := _m.Called(ctx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProvisionMFA provides a mock function with given fields: ctx, userID
func (_m *UserService) ProvisionMFA(ctx context.Context, userID uuid.UUID) (string, string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) string); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecoverPassword provides a mock function with given fields: ctx, email, token
func (_m *UserService) RecoverPassword(ctx context.Context, email string, token string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email, token)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, email, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterFromInvite provides a mock function with given fields: ctx, email, password, phone, inviteCode
func (_m *UserService) RegisterFromInvite(ctx context.Context, email string, password string, phone *string, inviteCode string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email, password, phone, inviteCode)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string, string) uuid.UUID); ok {
		r0 = rf(ctx, email, password, phone, inviteCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *string, string) error); ok {
		r1 = rf(ctx, email, password, phone, inviteCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, email, password, phone
func (_m *UserService) RegisterUser(ctx context.Context, email string, password string, phone *string) (uuid.UUID, error) {
	ret := _m.Called(ctx, email, password, phone)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) uuid.UUID); ok {
		r0 = rf(ctx, email, password, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *string) error); ok {
		r1 = rf(ctx, email, password, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerPasswordRecovery provides a mock function with given fields: ctx, id
func (_m *UserService) TriggerPasswordRecovery(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
