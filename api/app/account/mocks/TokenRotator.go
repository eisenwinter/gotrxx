// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tokens "github.com/eisenwinter/gotrxx/tokens"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TokenRotator is an autogenerated mock type for the TokenRotator type
type TokenRotator struct {
	mock.Mock
}

// RevokeCommonToken provides a mock function with given fields: ctx, tokenType, token, autID
func (_m *TokenRotator) RevokeCommonToken(ctx context.Context, tokenType tokens.CommonTokenType, token string, autID uuid.UUID) error {
	ret := _m.Called(ctx, tokenType, token, autID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tokens.CommonTokenType, string, uuid.UUID) error); ok {
		r0 = rf(ctx, tokenType, token, autID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RotateCommonToken provides a mock function with given fields: ctx, tokenType, token, clientID
func (_m *TokenRotator) RotateCommonToken(ctx context.Context, tokenType tokens.CommonTokenType, token string, clientID string) error {
	ret := _m.Called(ctx, tokenType, token, clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tokens.CommonTokenType, string, string) error); ok {
		r0 = rf(ctx, tokenType, token, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTokenRotator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenRotator creates a new instance of TokenRotator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenRotator(t mockConstructorTestingTNewTokenRotator) *TokenRotator {
	mock := &TokenRotator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
