// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	mock "github.com/stretchr/testify/mock"
)

// TokenVerifier is an autogenerated mock type for the TokenVerifier type
type TokenVerifier struct {
	mock.Mock
}

// ParseAndValidateAccessToken provides a mock function with given fields: accessToken
func (_m *TokenVerifier) ParseAndValidateAccessToken(accessToken string) (jwt.Token, error) {
	ret := _m.Called(accessToken)

	var r0 jwt.Token
	if rf, ok := ret.Get(0).(func(string) jwt.Token); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenVerifier creates a new instance of TokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenVerifier(t mockConstructorTestingTNewTokenVerifier) *TokenVerifier {
	mock := &TokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
